<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="theme-color" content="black">
    <meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <link rel="stylesheet" href="/style/both.css?v={{version}}">
    <link rel="stylesheet" href="/style/game.css?v={{version}}">
    <link id="mobileCSS" rel="stylesheet" href="/style/mobile.css?v={{version}}">
    <link rel="shortcut icon" href="/img/favicon.ico?v={{version}}" type="image/x-icon">
    <title>{{name}}</title>
    <link rel="manifest" href="/json/manifest.json?v={{version}}">
    <link rel="apple-touch-icon" href="apple-touch-icon.png">
    <link rel="apple-touch-startup-image" href="apple-touch-icon.png">
    <meta name="apple-mobile-web-app-title" content="{{name}}">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
  </head>
  <body onselect="typeof document.selection != 'undefined' ? document.selection.empty():'';">
    <script src="/js/gameDetails.js?v={{version}}"></script>
    <script src="/js/accountgame.js?v={{version}}"></script>
    <noscript>
      This game will not apear without JavaScript - turn it on to play.
    </noscript>
    <div class="wrapper">
      <div class="gameAndConsole">
        <div class="gamePlane">
          <canvas class="gamePlaneCanvas" style="width:100%;"></canvas>  
        </div>
        <div class="handler"></div>
      </div>
      <div class="handlerVertical"></div>
      <div class="mainMenu">
      </div>
      <div class="mobileControls leftPanel"></div>
      <div class="mobileControls rightPanel"></div>
    </div>
  </body>
</html>
<script src="/js/functions.js?v={{version}}"></script>
<script src="/js/sprites.js?v={{version}}"></script>
<script src="/js/map.js?v={{version}}"></script>
<script>const map = new GameMap();</script>
<script src="/js/controls.js?v={{version}}"></script>
<!-- RESIZE GAMEPLANE -->
<script>
  // MAKE RESIZEABLE MENUS
  const makeResizeable = (handlerName, parent, handleIn, axis) =>{
    const handler = document.querySelector('.'+handlerName);
    const wrapper = handler.closest('.'+parent);
    const boxA = wrapper.querySelector('.'+handleIn);
    let isHandlerDragging = false;
    document.addEventListener('mousedown', function(e) {
      if (e.target === handler) {
        isHandlerDragging = true;
      }
    });
    document.addEventListener('mousemove', function(e) {
      // Arbitrary minimum width set on box A, otherwise its inner content will collapse to width of 0
      const boxAminHeight = 60;

      if (!isHandlerDragging) {
        return false;
      }
      // get axis
      let containerOffset,pointerRelative, key;
      // * 8px is the left/right spacing between .handler and its inner pseudo-element
      if(axis == "y"){
        containerOffset = wrapper.offsetTop;
        pointerRelative = e.clientY - containerOffset;
        boxA.style.cssText = "min-height:"+(Math.max(boxAminHeight, pointerRelative - 8))+"px !important";
      }else{
        containerOffset = wrapper.offsetLeft;
        pointerRelative = e.clientX - containerOffset;
        const boxAW = parseInt(getComputedStyle(boxA).width, 10);
        const handlerW = parseInt(getComputedStyle(handler).width, 10);
        const handlingW = parseInt(getComputedStyle(document.querySelector(".wrapper>.mainMenu")).width, 10);
        const totalWidth = boxAW + handlerW + handlingW; 
        const maxBoxW = window.innerWidth - (handlerW + handlingW) - 1 ;
        if(totalWidth < window.innerWidth || pointerRelative < maxBoxW){
          boxA.style.cssText = "min-width:"+(Math.max(boxAminHeight, pointerRelative + 8))+"px !important";
        }
      }
      // * Set flex-grow to 0 to prevent it from growing
      boxA.style.flexGrow = 0;
      setResolution()      
    });
    document.addEventListener('mouseup', function(e) {
      // Turn off dragging flag when user mouse is up
      isHandlerDragging = false;
    });
  }
  // SET DOM'S
  makeResizeable('handler','gameAndConsole','gamePlane', "y");
  makeResizeable('handlerVertical','wrapper','gameAndConsole', "x");
  // makeResizeable('handlerVertical','wrapper','mainMenu', "x");
</script>
<!-- POPUP -->
<script>
    const popup = {
    init(title = "Player paused."){
      this.dom = document.createElement("div");
      this.dom.className = "popupParent";
      this.container = document.createElement("div");
      this.container.className = "popup";
      this.closeBar = document.createElement("div");
      this.closeBar.className = "closeBar";
      this.closeButton = document.createElement("div");
      this.closeButton.innerHTML = "x";
      this.closeButton.onclick = () =>{
        this.dom.remove();
      }
      this.closeBar.append(this.closeButton);
      this.container.append(this.closeBar);
      this.h1 = document.createElement("h1");
      this.h1.innerHTML = title;
      this.button = document.createElement("button");
      this.button.style.position = "unset";
      this.button.style.padding = "10px 50px";
      this.button.addEventListener(mobileControls.ev,() => {window.location.reload()});
      this.button.innerText = " RELOAD ";
      this.dom.append(this.container);
      this.container.append(this.h1);
      this.container.append(this.button);
      document.body.append(this.dom);
    }
  }
</script>
<!-- PLAYER INIT SETTINGS -->
<script>
  let player = {
    name : "{{nick}}",
    position :[0,0,0]
  };
</script>
<!--| COMPONENTS |-->
{# <script src="/js/components/Creature/Creature.js?v={{version}}"></script> #}
<script src="/js/components/Creature/Creature.js?v={{version}}"></script>
<script src="/js/components/Creature/Player.js?v={{version}}"></script>
<script src="/js/components/Creature/Monster.js?v={{version}}"></script>
<script src="/js/components/Creature/Npc.js?v={{version}}"></script>
<!--| GAMEPLANE PROPERTIES |-->
<script src="/js/gameplane.js?v={{version}}"></script>
{# <script src="/js/components.js?v={{version}}"></script> #}
<!--| WEBSOCKET SERVER CONNECTION |-->
<script src="/js/components/Game/Game.js?v={{version}}"></script>
<script src="/js/websocket.js?v={{version}}"></script>
<script src="/js/menus.js?v={{version}}"></script>
<!--| PRELOAD |-->
<script>
  // preload ;>
	const gamePlane = new GamePlane();
  const serv = new ServerConnect()
	const DOMLoader = (text, percent) => {
		document.querySelector(".loadDetails").innerHTML = text;
		document.querySelector(".progressBar").style.width = percent + "%";
  }
  DOMLoader("Load sprites", 10);
  map.loadSprites( async ()=>{
    menus.init();
    //DOMLoader("Load serwer info", 50);
    //await serv.sendDataToServer()
    DOMLoader("Loading map", 50);
    await map.load()
    DOMLoader("Loading Game Plane", 90);
    gamePlane.init();
    setResolution();
  })
    
  window.onresize = () =>{
    setResolution();
  }
</script>
<!--| DEVELOPER BUTTONS & STATS |-->
<script src="/js/components.js?v={{version}}"></script>

<script>
  const dev = {
    buttonIndex : 0,
    init(){
      const dev_stats = this.makeStatsField();
      const butt1 = this.makeDevButt("STOP",()=>{serv.close();gamePlane.stop()});
      const butt2 = this.makeDevButt("UPDATE",()=>{gamePlane.updategamePlane()});
			
			const stats_wrapper = document.createElement('div')
			const butt_wrapper = document.createElement('div')
			
      butt_wrapper.style.cssText = `
				display:flex;
			`;
      stats_wrapper.style.cssText = `
        width:30vw;
        position:fixed;
        left:0;
        top:0;
        padding:2%;
        font-size:0.6em;
        color:#000;
        background-color:rgba(255,255,255,0.8);
        z-index:4;
        `;


			butt_wrapper.append(butt1)
			butt_wrapper.append(butt2)
			stats_wrapper.append(butt_wrapper)
			stats_wrapper.append(dev_stats)
			document.body.append(stats_wrapper)
      this.update();
    },
    makeDevButt(title,func){
      const butt = document.createElement("button");
      // butt.onclick = () => { func()};
      butt.addEventListener(mobileControls.ev,func);
      //butt.style.cssText = `
      //  position:fixed;
      //`;
      butt.innerHTML =  title;
      butt.style.zIndex = 5;
      butt.style.margin = '0 5px 10px 0';
			
      //document.body.append(butt);
			
			//document.querySelector('.developer_stats').append(butt)
      //butt.style.marginTop = ((butt.clientHeight+10)*this.buttonIndex)+ "px";
      this.buttonIndex++;
			return butt
    },
    makeStatsField(){
      this.statsDOM = document.createElement("div");
      this.statsDOM.innerHTML = "DEV STATS."
			this.statsDOM.style.cssText = "user-select: text;"
			//this.statsDOM.className = "developer_stats"
      /*
			this.statsDOM.style.cssText = `
        width:30vw;
        position:fixed;
        left:0;
        top:0;
        padding:2%;
        font-size:0.6em;
        color:#000;
        background-color:rgba(255,255,255,0.8);
        z-index:4;
        `;
			/*/
      //document.body.append(this.statsDOM);
			return this.statsDOM
    },
    stats : {
      player: player.name
    },
    oldSec : 0,
    currFPS : 0,
    counterFPS : 0,
    update(){
      // count fps
      const sec = new Date().getSeconds();
      if(this.oldSec == sec){
        // counter
        this.currFPS++;
      }else{
        this.counterFPS = this.currFPS;
        this.currFPS = 0;
        this.oldSec = sec;
      }
      if(typeof this.statsDOM != "undefined"){
        this.statsDOM.innerHTML = "";
        for(const s of Object.keys(this.stats)){
          if(s == "time"){
            const t = new Date(this.stats[s]);
            const time = t.getHours()+":"+t.getMinutes()+":"+t.getSeconds();
            this.statsDOM.innerHTML += s +": "+time+"<br />";    
            continue;
          }
          this.statsDOM.innerHTML += s +": "+this.stats[s]+"<br />";
        }
      }
    }
  }
  if(new URLSearchParams(window.location.search).get("dev") == "on"){
    dev.init();
  }
</script>

<!-- DELAY BEFORE RELOAD - FOR FIREFOX -->
<script>
  document.cookie = "token={{ token | safe }}; SameSite=None; Secure";

  if(navigator.userAgent.toLowerCase().indexOf('firefox') > -1){
    // GET GOTO LOCATION
    // let whereLocation = "./game.html";
    // console.log("firefox detected")
    // setTimeout(()=>{
    //   const allA = document.querySelectorAll("a");
    //   console.log(allA)
    //   for(const a of allA){
    //     console.log(a)
    //     a.onclick = (e) => {
    //       // e.preventDefault();
    //       whereLocation = e.explicitOriginalTarget.href;
    //     }
    //   }
    // },5000)

    onbeforeunload = (e) => {
      // console.log(whereLocation)
      // e.preventDefault();
      // setTimeout(()=>{
      //   console.log("ASD");
      //   // return confirm("Your progress has been saved.");
      // },500)
      return "Your progress has been saved.";      
    }
  }
</script>
